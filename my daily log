This is my log for my coding lessons

##Log 1 ##Day 1 My learning journey for advanced lessons from Free Code Camp starts today Date: [3rd August 2020]

#TOPIC TO LEARN: DATA VISUALIZATION WITH D3#

*Today's progress: I completed one lesson in D3

#Data Visualization with D3: Add Document Elements with D3#

D3 has several methods that let you add and change elements in your document.

The select() method selects one element from the document. It takes an argument for the name of the element you want and returns an HTML node for the first element in the document that matches the name. Here's an example:

const anchor = d3.select("a");

The above example finds the first anchor tag on the page and saves an HTML node for it in the variable anchor. You can use the selection with other methods. The "d3" part of the example is a reference to the D3 object, which is how you access D3 methods.

Two other useful methods are append() and text().

The append() method takes an argument for the element you want to add to the document. It appends an HTML node to a selected item, and returns a handle to that node.

The text() method either sets the text of the selected node, or gets the current text. To set the value, you pass a string as an argument inside the parentheses of the method.

Here's an example that selects an unordered list, appends a list item, and adds text:

d3.select("ul") .append("li") .text("Very important item"); D3 allows you to chain several methods together with periods to perform a number of actions in a row.

QUESTION Use the select method to select the body tag in the document. Then append an h1 tag to it, and add the text "Learning D3" into the h1 element. THE TASK TO DO: The body should have one h1 element. Passed The h1 element should have the text "Learning D3" in it. Passed Your code should access the d3 object. Passed Your code should use the select method. Passed Your code should use the append method. Passed Your code should use the text method.

The solution for today that I completed is:

<script> // Add your code below this line d3.select("body") .append("h1") .text("Learning D3");
// Add your code above this line
</script>





##Day 2 Date:[4th August 2020]

Progress of the day:
Learnt and finished lesson 2 of the data visualization tutorial on fcc

Here is the code:

```
This is my log for my coding lessons

##Log 1 ##Day 1 My learning journey for advanced lessons from Free Code Camp starts today Date: [3rd August 2020]

#TOPIC TO LEARN: DATA VISUALIZATION WITH D3#

*Today's progress: I completed one lesson in D3

#Data Visualization with D3: Add Document Elements with D3#

D3 has several methods that let you add and change elements in your document.

The select() method selects one element from the document. It takes an argument for the name of the element you want and returns an HTML node for the first element in the document that matches the name. Here's an example:

const anchor = d3.select("a");

The above example finds the first anchor tag on the page and saves an HTML node for it in the variable anchor. You can use the selection with other methods. The "d3" part of the example is a reference to the D3 object, which is how you access D3 methods.

Two other useful methods are append() and text().

The append() method takes an argument for the element you want to add to the document. It appends an HTML node to a selected item, and returns a handle to that node.

The text() method either sets the text of the selected node, or gets the current text. To set the value, you pass a string as an argument inside the parentheses of the method.

Here's an example that selects an unordered list, appends a list item, and adds text:

d3.select("ul") .append("li") .text("Very important item"); D3 allows you to chain several methods together with periods to perform a number of actions in a row.

QUESTION Use the select method to select the body tag in the document. Then append an h1 tag to it, and add the text "Learning D3" into the h1 element. THE TASK TO DO: The body should have one h1 element. Passed The h1 element should have the text "Learning D3" in it. Passed Your code should access the d3 object. Passed Your code should use the select method. Passed Your code should use the append method. Passed Your code should use the text method.

The solution for today that I completed is:

<script> // Add your code below this line d3.select("body") .append("h1") .text("Learning D3");
// Add your code above this line
</script>
```



##Day3 #Log3
Date[4th august 2020]

Data Visualization with D3: Select a Group of Elements with D3
D3 also has the selectAll() method to select a group of elements. It returns an array of HTML nodes for all the items in the document that match the input string. Here's an example to select all the anchor tags in a document:

const anchors = d3.selectAll("a");

Like the select() method, selectAll() supports method chaining, and you can use it with other methods.

Select all of the li tags in the document, and change their text to "list item" by chaining the .text() method.

There should be 3 li elements on the page, and the text in each one should say "list item". Capitalization and spacing should match exactly.
Passed
Your code should access the d3 object.
Passed
Your code should use the selectAll method.

solution
<body>
  <ul>
    <li>Example</li>
    <li>Example</li>
    <li>Example</li>
  </ul>
  <script>
    // Add your code below this line


const li = d3.selectAll("li").text("list item");
           


    // Add your code above this line
  </script>
</body>







##Day 4 #Log 4
Date[05th August 2020]


Today's topic:Data Visualization with D3: Work with Data in D3
explanation:
The D3 library focuses on a data-driven approach. When you have a set of data, you can apply D3 methods to display it on the page. Data comes in many formats, but this challenge uses a simple array of numbers.

The first step is to make D3 aware of the data. The data() method is used on a selection of DOM elements to attach the data to those elements. The data set is passed as an argument to the method.

A common workflow pattern is to create a new element in the document for each piece of data in the set. D3 has the enter() method for this purpose.

When enter() is combined with the data() method, it looks at the selected elements from the page and compares them to the number of data items in the set. If there are fewer elements than data items, it creates the missing elements.

Here is an example that selects a ul element and creates a new list item based on the number of entries in the array:

<body>
  <ul></ul>
  <script>
    const dataset = ["a", "b", "c"];
    d3.select("ul").selectAll("li")
      .data(dataset)
      .enter()
      .append("li")
      .text("New item");
  </script>
</body>
It may seem confusing to select elements that don't exist yet. This code is telling D3 to first select the ul on the page. Next, select all list items, which returns an empty selection. Then the data() method reviews the dataset and runs the following code three times, once for each item in the array. The enter() method sees there are no li elements on the page, but it needs 3 (one for each piece of data in dataset). New li elements are appended to the ul and have the text "New item".

Select the body node, then select all h2 elements. Have D3 create and append an h2 tag for each item in the dataset array. The text in the h2 should say "New Title". Your code should use the data() and enter() methods.


task:
Select the body node, then select all h2 elements. Have D3 create and append an h2 tag for each item in the dataset array. The text in the h2 should say "New Title". Your code should use the data() and enter() methods.
hints:
Your document should have 9 h2 elements.
Passed
The text in the h2 elements should say "New Title". The capitalization and spacing should match exactly.
Passed
Your code should use the data() method.
Passed
Your code should use the enter() method.


solution:

<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    // Add your code below this line

      d3.select("body").selectAll("h2")
        .data(dataset)
        .enter()
        .append("h2")
        .text("New Title");

    // Add your code above this line
  </script>
</body>


result on screen
New Title
New Title
New Title
New Title
New Title
New Title
New Title
New Title
New Title





##Day 5 #Log 5
Date[06th August 2020]

Today's topic:Data Visualization with D3: Work with Dynamic Data in D3

The chapter
In the previous challenge, you created a new h2 element for each item in the dataset array, but they all contained the same text, "New Title". This is because you have not made use of the data that is bound to each of the h2 elements.

The D3 text() method can take a string or a callback function as an argument:

selection.text((d) => d)

In the example above, the parameter d refers to a single entry in the dataset that a selection is bound to.

The task:

Using the current example as context, the first h2 element is bound to 12, the second h2 element is bound to 31, the third h2 element is bound to 22, and so on.

Change the text() method so that each h2 element displays the corresponding value from the dataset array with a single space and "USD". For example, the first heading should be "12 USD".


The first h2 should have the text "12 USD".
Passed
The second h2 should have the text "31 USD".
Passed
The third h2 should have the text "22 USD".
Passed
The fourth h2 should have the text "17 USD".
Passed
The fifth h2 should have the text "25 USD".
Passed
The sixth h2 should have the text "18 USD".
Passed
The seventh h2 should have the text "29 USD".
Passed
The eighth h2 should have the text "14 USD".
Passed
The ninth h2 should have the text "9 USD".


The solution

<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    d3.select("body").selectAll("h2")
      .data(dataset)
      .enter()
      .append("h2")
      // Add your code below this line

      .text((d) => d + " USD");

      // Add your code above this line
  </script>
</body>


The result
12 USD
31 USD
22 USD
17 USD
25 USD
18 USD
29 USD
14 USD
9 USD










##Day 6 #Log 6
#Date[07th August 2020]
*Today's topic: Data Visualization with D3: Add Inline Styling to Elements*

How to do it: D3 lets you add inline CSS styles on dynamic elements with the style() method.

The style() method takes a comma-separated key-value pair as an argument. Here's an example to set the selection's text color to blue:

selection.style("color","blue");

Task:
Add the style() method to the code in the editor to make all the displayed text have a font-family of verdana.

Your h2 elements should have a font-family of verdana.
Passed
Your code should use the style() method.


Solution:
```
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    d3.select("body").selectAll("h2")
      .data(dataset)
      .enter()
      .append("h2")
      .text((d) => (d + " USD"))
      // Add your code below this line
            .style("font-family", "verdana");


      // Add your code above this line
  </script>
</body>
```


Next lesson topic:

Data Visualization with D3: Change Styles Based on Data

How to:
D3 is about visualization and presentation of data. It's likely you'll want to change the styling of elements based on the data. You can use a callback function in the style() method to change the styling for different elements.

For example, you may want to color a data point blue if it has a value less than 20, and red otherwise. You can use a callback function in the style() method and include the conditional logic. The callback function uses the d parameter to represent the data point:

selection.style("color", (d) => {
  /* Logic that returns the color based on a condition */
});
The style() method is not limited to setting the color - it can be used with other CSS properties as well.


Task:
Add the style() method to the code in the editor to set the color of the h2 elements conditionally. Write the callback function so if the data value is less than 20, it returns "red", otherwise it returns "green".

Note
You can use if-else logic, or the ternary operator.


The first h2 should have a color of red.
Passed
The second h2 should have a color of green.
Passed
The third h2 should have a color of green.
Passed
The fourth h2 should have a color of red.
Passed
The fifth h2 should have a color of green.
Passed
The sixth h2 should have a color of red.
Passed
The seventh h2 should have a color of green.
Passed
The eighth h2 should have a color of red.
Passed
The ninth h2 should have a color of red.


Solution:

```
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    d3.select("body").selectAll("h2")
      .data(dataset)
      .enter()
      .append("h2")
      .text((d) => (d + " USD"))
      // Add your code below this line

         .style("color", (d) =>{
               if(d<20){
                 return "red"
               }else{
                 return "green"
               }

         });

      // Add your code above this line
  </script>
</body>

```






##Day 7 #Log 7
#Date[08th August 2020]

*Today's topic:
Data Visualization with D3: Add Classes with D3

The lesson :
Using a lot of inline styles on HTML elements gets hard to manage, even for smaller apps. It's easier to add a class to elements and style that class one time using CSS rules. D3 has the attr() method to add any HTML attribute to an element, including a class name.

The attr() method works the same way that style() does. It takes comma-separated values, and can use a callback function. Here's an example to add a class of "container" to a selection:

selection.attr("class", "container");

Note that the "class" parameter will remain the same whenever you need to add a class and only the "container" parameter will change.



The task:
Add the attr() method to the code in the editor and put a class of bar on the div elements.

Your div elements should have a class of bar.
Passed
Your code should use the attr() method.


The solution:
```
<style>
  .bar {
    width: 25px;
    height: 100px;
    display: inline-block;
    background-color: blue;
  }
</style>
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    d3.select("body").selectAll("div")
      .data(dataset)
      .enter()
      .append("div")
      // Add your code below this line
        .attr("class", "bar");


      // Add your code above this line
  </script>
</body>
```







##Day 8 #Log 8
#Date[09th August 2020]

Todays topic
Data Visualization with D3: Update the Height of an Element Dynamically

Details
1) Create a div for each data point in the array

2) Give each div a dynamic height, using a callback function in the style() method that sets height equal to the data value

Recall the format to set a style using a callback function:

selection.style("cssProperty", (d) => d)

Add the style() method to the code in the editor to set the height property for each element. Use a callback function to return the value of the data point with the string "px" added to it.

The first div should have a height of 12 pixels.
Passed
The second div should have a height of 31 pixels.
Passed
The third div should have a height of 22 pixels.
Passed
The fourth div should have a height of 17 pixels.
Passed
The fifth div should have a height of 25 pixels.
Passed
The sixth div should have a height of 18 pixels.
Passed
The seventh div should have a height of 29 pixels.
Passed
The eighth div should have a height of 14 pixels.
Passed
The ninth div should have a height of 9 pixels.

SOLUTION:

```
<style>
  .bar {
    width: 25px;
    height: 100px;
    display: inline-block;
    background-color: blue;
  }
</style>
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    d3.select("body").selectAll("div")
      .data(dataset)
      .enter()
      .append("div")
      .attr("class", "bar")
      // Add your code below this line
          
        
        .style("height", (d)=>`${d}px`)

      // Add your code above this line
  </script>
</body>
```







##Day 9 #Log 9
#Date[10th August 2020]
Today's topic:
Data Visualization with D3: Learn About SVG in D3

Details
SVG stands for Scalable Vector Graphics.

Here "scalable" means that, if you zoom in or out on an object, it would not appear pixelated. It scales with the display system, whether it's on a small mobile screen or a large TV monitor.

SVG is used to make common geometric shapes. Since D3 maps data into a visual representation, it uses SVG to create the shapes for the visualization. SVG shapes for a web page must go within an HTML svg tag.

CSS can be scalable when styles use relative units (such as vh, vw, or percentages), but using SVG is more flexible to build data visualizations.

The task:

Add an svg node to the body using append(). Give it a width attribute set to the provided w constant and a height attribute set to the provided h constant using the attr() or style() methods for each. You'll see it in the output because there's a background-color of pink applied to it in the style tag.

Note
When using attr() width and height attributes do not have units. This is the building block of scaling - the element will always have a 5:1 width to height ratio, no matter what the zoom level is.


#The CONDITIONS:
Your document should have 1 svg element.
Passed
The svg element should have a width attribute set to 500 or styled to have a width of 500px.
Passed
The svg element should have a height attribute set to 100 or styled to have a height of 100px.
123

#Note
When using attr() width and height attributes do not have units. This is the building block of scaling - the element will always have a 5:1 width to height ratio, no matter what the zoom level is.

#THE SOLUTION:
```
<style>
  svg {
    background-color: pink;
    
  }
</style>
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];
    
    const w = 500;
    const h = 100;
    
    const svg = d3.select("body")
                  // Add your code below this line
                 .append("svg")
                 .attr("width",w)
                 .attr("height",h);
  </script>
</body>
```




Topic
Data Visualization with D3: Change the Presentation of a Bar Chart

details
The last challenge created a bar chart, but there are a couple of formatting changes that could improve it:

1) Add space between each bar to visually separate them, which is done by adding a margin to the CSS for the bar class

2) Increase the height of the bars to better show the difference in values, which is done by multiplying the value by a number to scale the height


Task
First, add a margin of 2px to the bar class in the style tag. Next, change the callback function in the style() method so it returns a value 10 times the original data value (plus the "px").

Note
Multiplying each data point by the same constant only alters the scale. It's like zooming in, and it doesn't change the meaning of the underlying data.

Passed
The first div should have a height of 120 pixels and a margin of 2 pixels.
The second div should have a height of 310 pixels and a margin of 2 pixels.
The third div should have a height of 220 pixels and a margin of 2 pixels.
The fourth div should have a height of 170 pixels and a margin of 2 pixels.
The fifth div should have a height of 250 pixels and a margin of 2 pixels.
Passed
The sixth div should have a height of 180 pixels and a margin of 2 pixels.
The seventh div should have a height of 290 pixels and a margin of 2 pixels.
The eighth div should have a height of 140 pixels and a margin of 2 pixels.
Passed
The ninth div should have a height of 90 pixels and a margin of 2 pixels.

SOLUTION
```
<style>
  .bar {
    width: 25px;
    height: 100px;
    /* Only change code below this line */
        margin:2px;
    
    /* Only change code above this line */
    display: inline-block;
    background-color: blue;
  }
</style>
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    d3.select("body").selectAll("div")
      .data(dataset)
      .enter()
      .append("div")
      .attr("class", "bar")
      .style("height", (d) => (10*d + "px"));

  </script>
</body>
```






##Day 10 #Log 10
#Date[12th August 2020]
Today's topic:
Data Visualization with D3: Display Shapes with SVG

Details of the topic
The last challenge created an svg element with a given width and height, which was visible because it had a background-color applied to it in the style tag. The code made space for the given width and height.

Task
The next step is to create a shape to put in the svg area. There are a number of supported shapes in SVG, such as rectangles and circles. They are used to display data. For example, a rectangle (<rect>) SVG shape could create a bar in a bar chart.

When you place a shape into the svg area, you can specify where it goes with x and y coordinates. The origin point of (0, 0) is in the upper-left corner. Positive values for x push the shape to the right, and positive values for y push the shape down from the origin point.

To place a shape in the middle of the 500 (width) x 100 (height) svg from last challenge, the x coordinate would be 250 and the y coordinate would be 50.

An SVG rect has four attributes. There are the x and y coordinates for where it is placed in the svg area. It also has a height and width to specify the size.

Add a rect shape to the svg using append(), and give it a width attribute of 25 and height attribute of 100. Also, give the rect x and y attributes each set to 0.

Passed
Your document should have 1 rect element.
Passed
The rect element should have a width attribute set to 25.
Passed
The rect element should have a height attribute set to 100.
Passed
The rect element should have an x attribute set to 0.
Passed
The rect element should have a y attribute set to 0.


SOLUTION:
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h)
                  // Add your code below this line
                  .append("rect")
                  .attr("width",25)
                  .attr("height",100)
                  .attr("x",0)
                  .attr("y",0)


                  // Add your code above 
                  this line
  </script>
</body>








##Day 11 #Log 11
#Date[13th August 2020]
#Today's topic:   Data Visualization with D3: Create a Bar for Each Data Point in the Set

##Details:
The last challenge added only one rectangle to the svg element to represent a bar. Here, you'll combine what you've learned so far about data(), enter(), and SVG shapes to create and append a rectangle for each data point in dataset.

A previous challenge showed the format for how to create and append a div for each item in dataset:

d3.select("body").selectAll("div")
  .data(dataset)
  .enter()
  .append("div")
There are a few differences working with rect elements instead of divs. The rects must be appended to an svg element, not directly to the body. Also, you need to tell D3 where to place each rect within the svg area. The bar placement will be covered in the next challenge.


###The Task:
Use the data(), enter(), and append() methods to create and append a rect for each item in dataset. The bars should display all on top of each other, this will be fixed in the next challenge.

Passed
Your document should have 9 rect elements.
Passed
Your code should use the data() method.
Passed
Your code should use the enter() method.
Passed
Your code should use the append() method.



#SOLUTION:
```
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("rect")
       // Add your code below this line
        .data(dataset)
        .enter()
        .append("rect")


       // Add your code above this line
       .attr("x", 0)
       .attr("y", 0)
       .attr("width", 25)
       .attr("height", 100);
  </script>
</body>

```


Next topic of the day:
#Data Visualization with D3: Dynamically Set the Coordinates for Each Bar
## Details
The last challenge created and appended a rectangle to the svg element for each point in dataset to represent a bar. Unfortunately, they were all stacked on top of each other.

The placement of a rectangle is handled by the x and y attributes. They tell D3 where to start drawing the shape in the svg area. The last challenge set them each to 0, so every bar was placed in the upper-left corner.

For a bar chart, all of the bars should sit on the same vertical level, which means the y value stays the same (at 0) for all bars. The x value, however, needs to change as you add new bars. Remember that larger x values push items farther to the right. As you go through the array elements in dataset, the x value should increase.

The attr() method in D3 accepts a callback function to dynamically set that attribute. The callback function takes two arguments, one for the data point itself (usually d) and one for the index of the data point in the array. The second argument for the index is optional. Here's the format:

selection.attr("property", (d, i) => {
  /* 
  * d is the data point value
  * i is the index of the data point in the array
  */
})
It's important to note that you do NOT need to write a for loop or use forEach() to iterate over the items in the data set. Recall that the data() method parses the data set, and any method that's chained after data() is run once for each item in the data set.

###The Task:
Change the x attribute callback function so it returns the index times 30.

Note
Each bar has a width of 25, so increasing each x value by 30 adds some space between the bars. Any value greater than 25 would work in this example.

Passed
The first rect should have an x value of 0.
Passed
The second rect should have an x value of 30.
Passed
The third rect should have an x value of 60.
Passed
The fourth rect should have an x value of 90.
Passed
The fifth rect should have an x value of 120.
Passed
The sixth rect should have an x value of 150.
Passed
The seventh rect should have an x value of 180.
Passed
The eighth rect should have an x value of 210.
Passed
The ninth rect should have an x value of 240.


#THE SOLUTION

```
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("rect")
       .data(dataset)
       .enter()
       .append("rect")
       .attr("x", (d, i) => {
         // Add your code below this line
            return i*30;
          


         // Add your code above this line
       })
       .attr("y", 0)
       .attr("width", 25)
       .attr("height", 100);
  </script>
</body>

```


NEXT TOPIC
#Data Visualization with D3: Dynamically Change the Height of Each Bar
##details
The height of each bar can be set to the value of the data point in the array, similar to how the x value was set dynamically.

selection.attr("property", (d, i) => {
  /* 
  * d is the data point value
  * i is the index of the data point in the array
  */
})

###The task
Change the callback function for the height attribute to return the data value times 3.

Note
Remember that multiplying all data points by the same constant scales the data (like zooming in). It helps to see the differences between bar values in this example.

Passed
The first rect should have a height of 36.
Passed
The second rect should have a height of 93.
Passed
The third rect should have a height of 66.
Passed
The fourth rect should have a height of 51.
Passed
The fifth rect should have a height of 75.
Passed
The sixth rect should have a height of 54.
Passed
The seventh rect should have a height of 87.
Passed
The eighth rect should have a height of 42.
Passed
The ninth rect should have a height of 27.


#THE SOLUTION

```
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("rect")
       .data(dataset)
       .enter()
       .append("rect")
       .attr("x", (d, i) => i * 30)
       .attr("y", 0)
       .attr("width", 25)
       .attr("height", (d, i) => {
         // Add your code below this line

          return d*3

         // Add your code above this line
       });
  </script>
</body>

```

SUMMARY : LEARNT FOLLOWING TOPICS TODAY:
#Data Visualization with D3: Create a Bar for Each Data Point in the Set
#Data Visualization with D3: Dynamically Set the Coordinates for Each Bar
#Data Visualization with D3: Dynamically Change the Height of Each Bar









##Day 12 #Log 12
#Date[14th August 2020]

#Today's topic :
Data Visualization with D3: Invert SVG Elements

Details
You may have noticed the bar chart looked like it's upside-down, or inverted. This is because of how SVG uses (x, y) coordinates.

In SVG, the origin point for the coordinates is in the upper-left corner. An x coordinate of 0 places a shape on the left edge of the SVG area. A y coordinate of 0 places a shape on the top edge of the SVG area. Higher x values push the rectangle to the right. Higher y values push the rectangle down.

To make the bars right-side-up, you need to change the way the y coordinate is calculated. It needs to account for both the height of the bar and the total height of the SVG area.

The height of the SVG area is 100. If you have a data point of 0 in the set, you would want the bar to start at the bottom of the SVG area (not the top). To do this, the y coordinate needs a value of 100. If the data point value were 1, you would start with a y coordinate of 100 to set the bar at the bottom. Then you need to account for the height of the bar of 1, so the final y coordinate would be 99.

The y coordinate that is y = heightOfSVG - heightOfBar would place the bars right-side-up.

#Task
Change the callback function for the y attribute to set the bars right-side-up. Remember that the height of the bar is 3 times the data value d.

Note
In general, the relationship is y = h - m * d, where m is the constant that scales the data points.

The first rect should have a y value of 64.
The second rect should have a y value of 7.
The third rect should have a y value of 34.
The fourth rect should have a y value of 49.
The fifth rect should have a y value of 25.
The sixth rect should have a y value of 46.
The seventh rect should have a y value of 13.
The eighth rect should have a y value of 58.
The ninth rect should have a y value of 73.



#SOLUTION
```
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("rect")
       .data(dataset)
       .enter()
       .append("rect")
       .attr("x", (d, i) => i * 30)
       .attr("y", (d, i) => {
         // Add your code below this line

              return (h - 3 * d);

         // Add your code above this line
       })
       .attr("width", 25)
       .attr("height", (d, i) => 3 * d);
  </script>
</body>


```








##Day 13 #Log 13
#Date[16th August 2020]
#Today's topic:
Data Visualization with D3: Change the Color of an SVG Element

Details of the lesson:
The bars are in the right position, but they are all the same black color. SVG has a way to change the color of the bars.

In SVG, a rect shape is colored with the fill attribute. It supports hex codes, color names, and rgb values, as well as more complex options like gradients and transparency.

The task:
Add an attr() method to set the "fill" of all the bars to the color "navy".

#The solution:
```
body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("rect")
       .data(dataset)
       .enter()
       .append("rect")
       .attr("x", (d, i) => i * 30)
       .attr("y", (d, i) => h - 3 * d)
       .attr("width", 25)
       .attr("height", (d, i) => 3 * d)
       // Add your code below this line

       .attr("fill", "navy")

       // Add your code above this line
  </script>
</body>

```





##Day 14 #Log 14
#Date[17th August 2020]

#Today's topic: Data Visualization with D3: Add Labels to D3 Elements

The lesson details
D3 lets you label a graph element, such as a bar, using the SVG text element.

Like the rect element, a text element needs to have x and y attributes, to place it on the SVG canvas. It also needs to access the data to display those values.

D3 gives you a high level of control over how you label your bars.

The task
The code in the editor already binds the data to each new text element. First, append text nodes to the svg. Next, add attributes for the x and y coordinates. They should be calculated the same way as the rect ones, except the y value for the text should make the label sit 3 units higher than the bar. Finally, use the D3 text() method to set the label equal to the data point value.

Note
For the label to sit higher than the bar, decide if the y value for the text should be 3 greater or 3 less than the y value for the bar.

The first text element should have a label of 12 and a y value of 61.
The second text element should have a label of 31 and a y value of 4.
The third text element should have a label of 22 and a y value of 31.
The fourth text element should have a label of 17 and a y value of 46.
The fifth text element should have a label of 25 and a y value of 22.
The sixth text element should have a label of 18 and a y value of 43.
The seventh text element should have a label of 29 and a y value of 10.
The eighth text element should have a label of 14 and a y value of 55.
The ninth text element should have a label of 9 and a y value of 70.


#THE SOLUTION

<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("rect")
       .data(dataset)
       .enter()
       .append("rect")
       .attr("x", (d, i) => i * 30)
       .attr("y", (d, i) => h - 3 * d)
       .attr("width", 25)
       .attr("height", (d, i) => 3 * d)
       .attr("fill", "navy");

    svg.selectAll("text")
       .data(dataset)
       .enter()
       // Add your code below this line
       .append("text")


       .text((d) => d)


       .attr("x", (d, i) => i * 30)


       .attr("y", (d, i) => h - (3 * d) - 3)



       // Add your code above this line
  </script>
<body>



