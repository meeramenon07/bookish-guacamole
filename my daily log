This is my log for my coding lessons

##Log 1 ##Day 1 My learning journey for advanced lessons from Free Code Camp starts today Date: [3rd August 2020]

#TOPIC TO LEARN: DATA VISUALIZATION WITH D3#

*Today's progress: I completed one lesson in D3

#Data Visualization with D3: Add Document Elements with D3#

D3 has several methods that let you add and change elements in your document.

The select() method selects one element from the document. It takes an argument for the name of the element you want and returns an HTML node for the first element in the document that matches the name. Here's an example:

const anchor = d3.select("a");

The above example finds the first anchor tag on the page and saves an HTML node for it in the variable anchor. You can use the selection with other methods. The "d3" part of the example is a reference to the D3 object, which is how you access D3 methods.

Two other useful methods are append() and text().

The append() method takes an argument for the element you want to add to the document. It appends an HTML node to a selected item, and returns a handle to that node.

The text() method either sets the text of the selected node, or gets the current text. To set the value, you pass a string as an argument inside the parentheses of the method.

Here's an example that selects an unordered list, appends a list item, and adds text:

d3.select("ul") .append("li") .text("Very important item"); D3 allows you to chain several methods together with periods to perform a number of actions in a row.

QUESTION Use the select method to select the body tag in the document. Then append an h1 tag to it, and add the text "Learning D3" into the h1 element. THE TASK TO DO: The body should have one h1 element. Passed The h1 element should have the text "Learning D3" in it. Passed Your code should access the d3 object. Passed Your code should use the select method. Passed Your code should use the append method. Passed Your code should use the text method.

The solution for today that I completed is:

<script> // Add your code below this line d3.select("body") .append("h1") .text("Learning D3");
// Add your code above this line
</script>





##Day 2 Date:[4th August 2020]

Progress of the day:
Learnt and finished lesson 2 of the data visualization tutorial on fcc

Here is the code:

```
This is my log for my coding lessons

##Log 1 ##Day 1 My learning journey for advanced lessons from Free Code Camp starts today Date: [3rd August 2020]

#TOPIC TO LEARN: DATA VISUALIZATION WITH D3#

*Today's progress: I completed one lesson in D3

#Data Visualization with D3: Add Document Elements with D3#

D3 has several methods that let you add and change elements in your document.

The select() method selects one element from the document. It takes an argument for the name of the element you want and returns an HTML node for the first element in the document that matches the name. Here's an example:

const anchor = d3.select("a");

The above example finds the first anchor tag on the page and saves an HTML node for it in the variable anchor. You can use the selection with other methods. The "d3" part of the example is a reference to the D3 object, which is how you access D3 methods.

Two other useful methods are append() and text().

The append() method takes an argument for the element you want to add to the document. It appends an HTML node to a selected item, and returns a handle to that node.

The text() method either sets the text of the selected node, or gets the current text. To set the value, you pass a string as an argument inside the parentheses of the method.

Here's an example that selects an unordered list, appends a list item, and adds text:

d3.select("ul") .append("li") .text("Very important item"); D3 allows you to chain several methods together with periods to perform a number of actions in a row.

QUESTION Use the select method to select the body tag in the document. Then append an h1 tag to it, and add the text "Learning D3" into the h1 element. THE TASK TO DO: The body should have one h1 element. Passed The h1 element should have the text "Learning D3" in it. Passed Your code should access the d3 object. Passed Your code should use the select method. Passed Your code should use the append method. Passed Your code should use the text method.

The solution for today that I completed is:

<script> // Add your code below this line d3.select("body") .append("h1") .text("Learning D3");
// Add your code above this line
</script>
```



##Day3 #Log3
Date[4th august 2020]

Data Visualization with D3: Select a Group of Elements with D3
D3 also has the selectAll() method to select a group of elements. It returns an array of HTML nodes for all the items in the document that match the input string. Here's an example to select all the anchor tags in a document:

const anchors = d3.selectAll("a");

Like the select() method, selectAll() supports method chaining, and you can use it with other methods.

Select all of the li tags in the document, and change their text to "list item" by chaining the .text() method.

There should be 3 li elements on the page, and the text in each one should say "list item". Capitalization and spacing should match exactly.
Passed
Your code should access the d3 object.
Passed
Your code should use the selectAll method.

solution
<body>
  <ul>
    <li>Example</li>
    <li>Example</li>
    <li>Example</li>
  </ul>
  <script>
    // Add your code below this line


const li = d3.selectAll("li").text("list item");
           


    // Add your code above this line
  </script>
</body>







##Day 4 #Log 4
Date[05th August 2020]


Today's topic:Data Visualization with D3: Work with Data in D3
explanation:
The D3 library focuses on a data-driven approach. When you have a set of data, you can apply D3 methods to display it on the page. Data comes in many formats, but this challenge uses a simple array of numbers.

The first step is to make D3 aware of the data. The data() method is used on a selection of DOM elements to attach the data to those elements. The data set is passed as an argument to the method.

A common workflow pattern is to create a new element in the document for each piece of data in the set. D3 has the enter() method for this purpose.

When enter() is combined with the data() method, it looks at the selected elements from the page and compares them to the number of data items in the set. If there are fewer elements than data items, it creates the missing elements.

Here is an example that selects a ul element and creates a new list item based on the number of entries in the array:

<body>
  <ul></ul>
  <script>
    const dataset = ["a", "b", "c"];
    d3.select("ul").selectAll("li")
      .data(dataset)
      .enter()
      .append("li")
      .text("New item");
  </script>
</body>
It may seem confusing to select elements that don't exist yet. This code is telling D3 to first select the ul on the page. Next, select all list items, which returns an empty selection. Then the data() method reviews the dataset and runs the following code three times, once for each item in the array. The enter() method sees there are no li elements on the page, but it needs 3 (one for each piece of data in dataset). New li elements are appended to the ul and have the text "New item".

Select the body node, then select all h2 elements. Have D3 create and append an h2 tag for each item in the dataset array. The text in the h2 should say "New Title". Your code should use the data() and enter() methods.


task:
Select the body node, then select all h2 elements. Have D3 create and append an h2 tag for each item in the dataset array. The text in the h2 should say "New Title". Your code should use the data() and enter() methods.
hints:
Your document should have 9 h2 elements.
Passed
The text in the h2 elements should say "New Title". The capitalization and spacing should match exactly.
Passed
Your code should use the data() method.
Passed
Your code should use the enter() method.


solution:

<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    // Add your code below this line

      d3.select("body").selectAll("h2")
        .data(dataset)
        .enter()
        .append("h2")
        .text("New Title");

    // Add your code above this line
  </script>
</body>


result on screen
New Title
New Title
New Title
New Title
New Title
New Title
New Title
New Title
New Title





##Day 5 #Log 5
Date[06th August 2020]

Today's topic:Data Visualization with D3: Work with Dynamic Data in D3

The chapter
In the previous challenge, you created a new h2 element for each item in the dataset array, but they all contained the same text, "New Title". This is because you have not made use of the data that is bound to each of the h2 elements.

The D3 text() method can take a string or a callback function as an argument:

selection.text((d) => d)

In the example above, the parameter d refers to a single entry in the dataset that a selection is bound to.

The task:

Using the current example as context, the first h2 element is bound to 12, the second h2 element is bound to 31, the third h2 element is bound to 22, and so on.

Change the text() method so that each h2 element displays the corresponding value from the dataset array with a single space and "USD". For example, the first heading should be "12 USD".


The first h2 should have the text "12 USD".
Passed
The second h2 should have the text "31 USD".
Passed
The third h2 should have the text "22 USD".
Passed
The fourth h2 should have the text "17 USD".
Passed
The fifth h2 should have the text "25 USD".
Passed
The sixth h2 should have the text "18 USD".
Passed
The seventh h2 should have the text "29 USD".
Passed
The eighth h2 should have the text "14 USD".
Passed
The ninth h2 should have the text "9 USD".


The solution

<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    d3.select("body").selectAll("h2")
      .data(dataset)
      .enter()
      .append("h2")
      // Add your code below this line

      .text((d) => d + " USD");

      // Add your code above this line
  </script>
</body>


The result
12 USD
31 USD
22 USD
17 USD
25 USD
18 USD
29 USD
14 USD
9 USD










##Day 6 #Log 6
#Date[07th August 2020]
*Today's topic: Data Visualization with D3: Add Inline Styling to Elements*

How to do it: D3 lets you add inline CSS styles on dynamic elements with the style() method.

The style() method takes a comma-separated key-value pair as an argument. Here's an example to set the selection's text color to blue:

selection.style("color","blue");

Task:
Add the style() method to the code in the editor to make all the displayed text have a font-family of verdana.

Your h2 elements should have a font-family of verdana.
Passed
Your code should use the style() method.


Solution:
```
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    d3.select("body").selectAll("h2")
      .data(dataset)
      .enter()
      .append("h2")
      .text((d) => (d + " USD"))
      // Add your code below this line
            .style("font-family", "verdana");


      // Add your code above this line
  </script>
</body>
```


Next lesson topic:

Data Visualization with D3: Change Styles Based on Data

How to:
D3 is about visualization and presentation of data. It's likely you'll want to change the styling of elements based on the data. You can use a callback function in the style() method to change the styling for different elements.

For example, you may want to color a data point blue if it has a value less than 20, and red otherwise. You can use a callback function in the style() method and include the conditional logic. The callback function uses the d parameter to represent the data point:

selection.style("color", (d) => {
  /* Logic that returns the color based on a condition */
});
The style() method is not limited to setting the color - it can be used with other CSS properties as well.


Task:
Add the style() method to the code in the editor to set the color of the h2 elements conditionally. Write the callback function so if the data value is less than 20, it returns "red", otherwise it returns "green".

Note
You can use if-else logic, or the ternary operator.


The first h2 should have a color of red.
Passed
The second h2 should have a color of green.
Passed
The third h2 should have a color of green.
Passed
The fourth h2 should have a color of red.
Passed
The fifth h2 should have a color of green.
Passed
The sixth h2 should have a color of red.
Passed
The seventh h2 should have a color of green.
Passed
The eighth h2 should have a color of red.
Passed
The ninth h2 should have a color of red.


Solution:

```
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    d3.select("body").selectAll("h2")
      .data(dataset)
      .enter()
      .append("h2")
      .text((d) => (d + " USD"))
      // Add your code below this line

         .style("color", (d) =>{
               if(d<20){
                 return "red"
               }else{
                 return "green"
               }

         });

      // Add your code above this line
  </script>
</body>

```






##Day 7 #Log 7
#Date[08th August 2020]

*Today's topic:
Data Visualization with D3: Add Classes with D3

The lesson :
Using a lot of inline styles on HTML elements gets hard to manage, even for smaller apps. It's easier to add a class to elements and style that class one time using CSS rules. D3 has the attr() method to add any HTML attribute to an element, including a class name.

The attr() method works the same way that style() does. It takes comma-separated values, and can use a callback function. Here's an example to add a class of "container" to a selection:

selection.attr("class", "container");

Note that the "class" parameter will remain the same whenever you need to add a class and only the "container" parameter will change.



The task:
Add the attr() method to the code in the editor and put a class of bar on the div elements.

Your div elements should have a class of bar.
Passed
Your code should use the attr() method.


The solution:
```
<style>
  .bar {
    width: 25px;
    height: 100px;
    display: inline-block;
    background-color: blue;
  }
</style>
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    d3.select("body").selectAll("div")
      .data(dataset)
      .enter()
      .append("div")
      // Add your code below this line
        .attr("class", "bar");


      // Add your code above this line
  </script>
</body>
```







##Day 8 #Log 8
#Date[09th August 2020]

Todays topic
Data Visualization with D3: Update the Height of an Element Dynamically

Details
1) Create a div for each data point in the array

2) Give each div a dynamic height, using a callback function in the style() method that sets height equal to the data value

Recall the format to set a style using a callback function:

selection.style("cssProperty", (d) => d)

Add the style() method to the code in the editor to set the height property for each element. Use a callback function to return the value of the data point with the string "px" added to it.

The first div should have a height of 12 pixels.
Passed
The second div should have a height of 31 pixels.
Passed
The third div should have a height of 22 pixels.
Passed
The fourth div should have a height of 17 pixels.
Passed
The fifth div should have a height of 25 pixels.
Passed
The sixth div should have a height of 18 pixels.
Passed
The seventh div should have a height of 29 pixels.
Passed
The eighth div should have a height of 14 pixels.
Passed
The ninth div should have a height of 9 pixels.

SOLUTION:

```
<style>
  .bar {
    width: 25px;
    height: 100px;
    display: inline-block;
    background-color: blue;
  }
</style>
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    d3.select("body").selectAll("div")
      .data(dataset)
      .enter()
      .append("div")
      .attr("class", "bar")
      // Add your code below this line
          
        
        .style("height", (d)=>`${d}px`)

      // Add your code above this line
  </script>
</body>
```







##Day 9 #Log 9
#Date[10th August 2020]
Today's topic:
Data Visualization with D3: Learn About SVG in D3

Details
SVG stands for Scalable Vector Graphics.

Here "scalable" means that, if you zoom in or out on an object, it would not appear pixelated. It scales with the display system, whether it's on a small mobile screen or a large TV monitor.

SVG is used to make common geometric shapes. Since D3 maps data into a visual representation, it uses SVG to create the shapes for the visualization. SVG shapes for a web page must go within an HTML svg tag.

CSS can be scalable when styles use relative units (such as vh, vw, or percentages), but using SVG is more flexible to build data visualizations.

The task:

Add an svg node to the body using append(). Give it a width attribute set to the provided w constant and a height attribute set to the provided h constant using the attr() or style() methods for each. You'll see it in the output because there's a background-color of pink applied to it in the style tag.

Note
When using attr() width and height attributes do not have units. This is the building block of scaling - the element will always have a 5:1 width to height ratio, no matter what the zoom level is.


#The CONDITIONS:
Your document should have 1 svg element.
Passed
The svg element should have a width attribute set to 500 or styled to have a width of 500px.
Passed
The svg element should have a height attribute set to 100 or styled to have a height of 100px.
123

#Note
When using attr() width and height attributes do not have units. This is the building block of scaling - the element will always have a 5:1 width to height ratio, no matter what the zoom level is.

#THE SOLUTION:
```
<style>
  svg {
    background-color: pink;
    
  }
</style>
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];
    
    const w = 500;
    const h = 100;
    
    const svg = d3.select("body")
                  // Add your code below this line
                 .append("svg")
                 .attr("width",w)
                 .attr("height",h);
  </script>
</body>
```




Topic
Data Visualization with D3: Change the Presentation of a Bar Chart

details
The last challenge created a bar chart, but there are a couple of formatting changes that could improve it:

1) Add space between each bar to visually separate them, which is done by adding a margin to the CSS for the bar class

2) Increase the height of the bars to better show the difference in values, which is done by multiplying the value by a number to scale the height


Task
First, add a margin of 2px to the bar class in the style tag. Next, change the callback function in the style() method so it returns a value 10 times the original data value (plus the "px").

Note
Multiplying each data point by the same constant only alters the scale. It's like zooming in, and it doesn't change the meaning of the underlying data.

Passed
The first div should have a height of 120 pixels and a margin of 2 pixels.
The second div should have a height of 310 pixels and a margin of 2 pixels.
The third div should have a height of 220 pixels and a margin of 2 pixels.
The fourth div should have a height of 170 pixels and a margin of 2 pixels.
The fifth div should have a height of 250 pixels and a margin of 2 pixels.
Passed
The sixth div should have a height of 180 pixels and a margin of 2 pixels.
The seventh div should have a height of 290 pixels and a margin of 2 pixels.
The eighth div should have a height of 140 pixels and a margin of 2 pixels.
Passed
The ninth div should have a height of 90 pixels and a margin of 2 pixels.

SOLUTION
```
<style>
  .bar {
    width: 25px;
    height: 100px;
    /* Only change code below this line */
        margin:2px;
    
    /* Only change code above this line */
    display: inline-block;
    background-color: blue;
  }
</style>
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    d3.select("body").selectAll("div")
      .data(dataset)
      .enter()
      .append("div")
      .attr("class", "bar")
      .style("height", (d) => (10*d + "px"));

  </script>
</body>
```






##Day 10 #Log 10
#Date[12th August 2020]
Today's topic:
Data Visualization with D3: Display Shapes with SVG

Details of the topic
The last challenge created an svg element with a given width and height, which was visible because it had a background-color applied to it in the style tag. The code made space for the given width and height.

Task
The next step is to create a shape to put in the svg area. There are a number of supported shapes in SVG, such as rectangles and circles. They are used to display data. For example, a rectangle (<rect>) SVG shape could create a bar in a bar chart.

When you place a shape into the svg area, you can specify where it goes with x and y coordinates. The origin point of (0, 0) is in the upper-left corner. Positive values for x push the shape to the right, and positive values for y push the shape down from the origin point.

To place a shape in the middle of the 500 (width) x 100 (height) svg from last challenge, the x coordinate would be 250 and the y coordinate would be 50.

An SVG rect has four attributes. There are the x and y coordinates for where it is placed in the svg area. It also has a height and width to specify the size.

Add a rect shape to the svg using append(), and give it a width attribute of 25 and height attribute of 100. Also, give the rect x and y attributes each set to 0.

Passed
Your document should have 1 rect element.
Passed
The rect element should have a width attribute set to 25.
Passed
The rect element should have a height attribute set to 100.
Passed
The rect element should have an x attribute set to 0.
Passed
The rect element should have a y attribute set to 0.


SOLUTION:
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h)
                  // Add your code below this line
                  .append("rect")
                  .attr("width",25)
                  .attr("height",100)
                  .attr("x",0)
                  .attr("y",0)


                  // Add your code above 
                  this line
  </script>
</body>








##Day 11 #Log 11
#Date[13th August 2020]
#Today's topic:   Data Visualization with D3: Create a Bar for Each Data Point in the Set

##Details:
The last challenge added only one rectangle to the svg element to represent a bar. Here, you'll combine what you've learned so far about data(), enter(), and SVG shapes to create and append a rectangle for each data point in dataset.

A previous challenge showed the format for how to create and append a div for each item in dataset:

d3.select("body").selectAll("div")
  .data(dataset)
  .enter()
  .append("div")
There are a few differences working with rect elements instead of divs. The rects must be appended to an svg element, not directly to the body. Also, you need to tell D3 where to place each rect within the svg area. The bar placement will be covered in the next challenge.


###The Task:
Use the data(), enter(), and append() methods to create and append a rect for each item in dataset. The bars should display all on top of each other, this will be fixed in the next challenge.

Passed
Your document should have 9 rect elements.
Passed
Your code should use the data() method.
Passed
Your code should use the enter() method.
Passed
Your code should use the append() method.



#SOLUTION:
```
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("rect")
       // Add your code below this line
        .data(dataset)
        .enter()
        .append("rect")


       // Add your code above this line
       .attr("x", 0)
       .attr("y", 0)
       .attr("width", 25)
       .attr("height", 100);
  </script>
</body>

```


Next topic of the day:
#Data Visualization with D3: Dynamically Set the Coordinates for Each Bar
## Details
The last challenge created and appended a rectangle to the svg element for each point in dataset to represent a bar. Unfortunately, they were all stacked on top of each other.

The placement of a rectangle is handled by the x and y attributes. They tell D3 where to start drawing the shape in the svg area. The last challenge set them each to 0, so every bar was placed in the upper-left corner.

For a bar chart, all of the bars should sit on the same vertical level, which means the y value stays the same (at 0) for all bars. The x value, however, needs to change as you add new bars. Remember that larger x values push items farther to the right. As you go through the array elements in dataset, the x value should increase.

The attr() method in D3 accepts a callback function to dynamically set that attribute. The callback function takes two arguments, one for the data point itself (usually d) and one for the index of the data point in the array. The second argument for the index is optional. Here's the format:

selection.attr("property", (d, i) => {
  /* 
  * d is the data point value
  * i is the index of the data point in the array
  */
})
It's important to note that you do NOT need to write a for loop or use forEach() to iterate over the items in the data set. Recall that the data() method parses the data set, and any method that's chained after data() is run once for each item in the data set.

###The Task:
Change the x attribute callback function so it returns the index times 30.

Note
Each bar has a width of 25, so increasing each x value by 30 adds some space between the bars. Any value greater than 25 would work in this example.

Passed
The first rect should have an x value of 0.
Passed
The second rect should have an x value of 30.
Passed
The third rect should have an x value of 60.
Passed
The fourth rect should have an x value of 90.
Passed
The fifth rect should have an x value of 120.
Passed
The sixth rect should have an x value of 150.
Passed
The seventh rect should have an x value of 180.
Passed
The eighth rect should have an x value of 210.
Passed
The ninth rect should have an x value of 240.


#THE SOLUTION

```
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("rect")
       .data(dataset)
       .enter()
       .append("rect")
       .attr("x", (d, i) => {
         // Add your code below this line
            return i*30;
          


         // Add your code above this line
       })
       .attr("y", 0)
       .attr("width", 25)
       .attr("height", 100);
  </script>
</body>

```


NEXT TOPIC
#Data Visualization with D3: Dynamically Change the Height of Each Bar
##details
The height of each bar can be set to the value of the data point in the array, similar to how the x value was set dynamically.

selection.attr("property", (d, i) => {
  /* 
  * d is the data point value
  * i is the index of the data point in the array
  */
})

###The task
Change the callback function for the height attribute to return the data value times 3.

Note
Remember that multiplying all data points by the same constant scales the data (like zooming in). It helps to see the differences between bar values in this example.

Passed
The first rect should have a height of 36.
Passed
The second rect should have a height of 93.
Passed
The third rect should have a height of 66.
Passed
The fourth rect should have a height of 51.
Passed
The fifth rect should have a height of 75.
Passed
The sixth rect should have a height of 54.
Passed
The seventh rect should have a height of 87.
Passed
The eighth rect should have a height of 42.
Passed
The ninth rect should have a height of 27.


#THE SOLUTION

```
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("rect")
       .data(dataset)
       .enter()
       .append("rect")
       .attr("x", (d, i) => i * 30)
       .attr("y", 0)
       .attr("width", 25)
       .attr("height", (d, i) => {
         // Add your code below this line

          return d*3

         // Add your code above this line
       });
  </script>
</body>

```

SUMMARY : LEARNT FOLLOWING TOPICS TODAY:
#Data Visualization with D3: Create a Bar for Each Data Point in the Set
#Data Visualization with D3: Dynamically Set the Coordinates for Each Bar
#Data Visualization with D3: Dynamically Change the Height of Each Bar









##Day 12 #Log 12
#Date[14th August 2020]

#Today's topic :
Data Visualization with D3: Invert SVG Elements

Details
You may have noticed the bar chart looked like it's upside-down, or inverted. This is because of how SVG uses (x, y) coordinates.

In SVG, the origin point for the coordinates is in the upper-left corner. An x coordinate of 0 places a shape on the left edge of the SVG area. A y coordinate of 0 places a shape on the top edge of the SVG area. Higher x values push the rectangle to the right. Higher y values push the rectangle down.

To make the bars right-side-up, you need to change the way the y coordinate is calculated. It needs to account for both the height of the bar and the total height of the SVG area.

The height of the SVG area is 100. If you have a data point of 0 in the set, you would want the bar to start at the bottom of the SVG area (not the top). To do this, the y coordinate needs a value of 100. If the data point value were 1, you would start with a y coordinate of 100 to set the bar at the bottom. Then you need to account for the height of the bar of 1, so the final y coordinate would be 99.

The y coordinate that is y = heightOfSVG - heightOfBar would place the bars right-side-up.

#Task
Change the callback function for the y attribute to set the bars right-side-up. Remember that the height of the bar is 3 times the data value d.

Note
In general, the relationship is y = h - m * d, where m is the constant that scales the data points.

The first rect should have a y value of 64.
The second rect should have a y value of 7.
The third rect should have a y value of 34.
The fourth rect should have a y value of 49.
The fifth rect should have a y value of 25.
The sixth rect should have a y value of 46.
The seventh rect should have a y value of 13.
The eighth rect should have a y value of 58.
The ninth rect should have a y value of 73.



#SOLUTION
```
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("rect")
       .data(dataset)
       .enter()
       .append("rect")
       .attr("x", (d, i) => i * 30)
       .attr("y", (d, i) => {
         // Add your code below this line

              return (h - 3 * d);

         // Add your code above this line
       })
       .attr("width", 25)
       .attr("height", (d, i) => 3 * d);
  </script>
</body>


```








##Day 13 #Log 13
#Date[16th August 2020]
#Today's topic:
Data Visualization with D3: Change the Color of an SVG Element

Details of the lesson:
The bars are in the right position, but they are all the same black color. SVG has a way to change the color of the bars.

In SVG, a rect shape is colored with the fill attribute. It supports hex codes, color names, and rgb values, as well as more complex options like gradients and transparency.

The task:
Add an attr() method to set the "fill" of all the bars to the color "navy".

#The solution:
```
body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("rect")
       .data(dataset)
       .enter()
       .append("rect")
       .attr("x", (d, i) => i * 30)
       .attr("y", (d, i) => h - 3 * d)
       .attr("width", 25)
       .attr("height", (d, i) => 3 * d)
       // Add your code below this line

       .attr("fill", "navy")

       // Add your code above this line
  </script>
</body>

```





##Day 14 #Log 14
#Date[17th August 2020]

#Today's topic: Data Visualization with D3: Add Labels to D3 Elements

The lesson details
D3 lets you label a graph element, such as a bar, using the SVG text element.

Like the rect element, a text element needs to have x and y attributes, to place it on the SVG canvas. It also needs to access the data to display those values.

D3 gives you a high level of control over how you label your bars.

The task
The code in the editor already binds the data to each new text element. First, append text nodes to the svg. Next, add attributes for the x and y coordinates. They should be calculated the same way as the rect ones, except the y value for the text should make the label sit 3 units higher than the bar. Finally, use the D3 text() method to set the label equal to the data point value.

Note
For the label to sit higher than the bar, decide if the y value for the text should be 3 greater or 3 less than the y value for the bar.

The first text element should have a label of 12 and a y value of 61.
The second text element should have a label of 31 and a y value of 4.
The third text element should have a label of 22 and a y value of 31.
The fourth text element should have a label of 17 and a y value of 46.
The fifth text element should have a label of 25 and a y value of 22.
The sixth text element should have a label of 18 and a y value of 43.
The seventh text element should have a label of 29 and a y value of 10.
The eighth text element should have a label of 14 and a y value of 55.
The ninth text element should have a label of 9 and a y value of 70.


#THE SOLUTION

<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("rect")
       .data(dataset)
       .enter()
       .append("rect")
       .attr("x", (d, i) => i * 30)
       .attr("y", (d, i) => h - 3 * d)
       .attr("width", 25)
       .attr("height", (d, i) => 3 * d)
       .attr("fill", "navy");

    svg.selectAll("text")
       .data(dataset)
       .enter()
       // Add your code below this line
       .append("text")


       .text((d) => d)


       .attr("x", (d, i) => i * 30)


       .attr("y", (d, i) => h - (3 * d) - 3)



       // Add your code above this line
  </script>
<body>










##Day 15 #Log 15
#Date[18th August 2020]

#Today's topic: Data Visualization with D3: Style D3 Labels

Details of the lesson:
D3 methods can add styles to the bar labels. The fill attribute sets the color of the text for a text node. The style() method sets CSS rules for other styles, such as "font-family" or "font-size".

#The task:
Set the font-size of the text elements to 25px, and the color of the text to red.

The labels should all have a fill color of red.
The labels should all have a font-size of 25 pixels.


#THE RESULT SOLUTION:
```
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("rect")
       .data(dataset)
       .enter()
       .append("rect")
       .attr("x", (d, i) => i * 30)
       .attr("y", (d, i) => h - 3 * d)
       .attr("width", 25)
       .attr("height", (d, i) => d * 3)
       .attr("fill", "navy");

    svg.selectAll("text")
       .data(dataset)
       .enter()
       .append("text")
       .text((d) => d)
       .attr("x", (d, i) => i * 30)
       .attr("y", (d, i) => h - (3 * d) - 3)
       // Add your code below this line
        .attr("fill", "red")
        .style("font-size", "25px")


       // Add your code above this line
  </script>
</body>

```


Second topic of the day
Data Visualization with D3: Add a Hover Effect to a D3 Element

#The details of the effect how it works
It's possible to add effects that highlight a bar when the user hovers over it with the mouse. So far, the styling for the rectangles is applied with the built-in D3 and SVG methods, but you can use CSS as well.

You set the CSS class on the SVG elements with the attr() method. Then the :hover pseudo-class for your new class holds the style rules for any hover effects.
#The Task:

Use the attr() method to add a class of bar to all the rect elements. This changes the fill color of the bar to brown when you mouse over it.

Passed
Your rect elements should have a class of bar.


#SOLUTION
```
<style>
  .bar:hover {
    fill: brown;
  }
</style>
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("rect")
       .data(dataset)
       .enter()
       .append("rect")
       .attr("x", (d, i) => i * 30)
       .attr("y", (d, i) => h - 3 * d)
       .attr("width", 25)
       .attr("height", (d, i) => 3 * d)
       .attr("fill", "navy")
       // Add your code below this line

        .attr("class", "bar")

       // Add your code above this line

    svg.selectAll("text")
       .data(dataset)
       .enter()
       .append("text")
       .text((d) => d)
       .attr("x", (d, i) => i * 30)
       .attr("y", (d, i) => h - (3 * d) - 3);

  </script>
</body>

```







##Day 16 #Log 16
#Date[19th August 2020]

#Topic of the day:
Data Visualization with D3: Add a Tooltip to a D3 Element

Details:
A tooltip shows more information about an item on a page when the user hovers over that item. There are several ways to add a tooltip to a visualization, this challenge uses the SVG title element.

title pairs with the text() method to dynamically add data to the bars.


The Task:
Append a title element under each rect node. Then call the text() method with a callback function so the text displays the data value.


Your code should have 9 title elements.
Passed
The first title element should have tooltip text of 12.
Passed
The second title element should have tooltip text of 31.
Passed
The third title element should have tooltip text of 22.
Passed
The fourth title element should have tooltip text of 17.
Passed
The fifth title element should have tooltip text of 25.
Passed
The sixth title element should have tooltip text of 18.
Passed
The seventh title element should have tooltip text of 29.
Passed
The eighth title element should have tooltip text of 14.
Passed
The ninth title element should have tooltip text of 9.


#The Solution
```
<style>
  .bar:hover {
    fill: brown;
  }
</style>
<body>
  <script>
    const dataset = [12, 31, 22, 17, 25, 18, 29, 14, 9];

    const w = 500;
    const h = 100;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("rect")
       .data(dataset)
       .enter()
       .append("rect")
       .attr("x", (d, i) => i * 30)
       .attr("y", (d, i) => h - 3 * d)
       .attr("width", 25)
       .attr("height", (d, i) => d * 3)
       .attr("fill", "navy")
       .attr("class", "bar")
       // Add your code below this line

        .append("title")
        .text( (d) => d);

       // Add your code above this line

    svg.selectAll("text")
       .data(dataset)
       .enter()
       .append("text")
       .text((d) => d)
       .attr("x", (d, i) => i * 30)
       .attr("y", (d, i) => h - (d * 3 + 3))

  </script>
</body>

```







##Day 17 #Log 17
#Date[20th August 2020]

#Topic: Data Visualization with D3: Create a Scatterplot with SVG Circles

details-
A scatter plot is another type of visualization. It usually uses circles to map data points, which have two values each. These values tie to the x and y axes, and are used to position the circle in the visualization.

SVG has a circle tag to create the circle shape. It works a lot like the rect elements you used for the bar chart.

Task:
Use the data(), enter(), and append() methods to bind dataset to new circle elements that are appended to the SVG canvas.

Note
The circles won't be visible because we haven't set their attributes yet. We'll do that in the next challenge.

Your code should have 10 circle elements.

SOLUTION:

```
<body>
  <script>
    const dataset = [
                  [ 34,    78 ],
                  [ 109,   280 ],
                  [ 310,   120 ],
                  [ 79,    411 ],
                  [ 420,   220 ],
                  [ 233,   145 ],
                  [ 333,   96 ],
                  [ 222,   333 ],
                  [ 78,    320 ],
                  [ 21,    123 ]
                ];


    const w = 500;
    const h = 500;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("circle")
       // Add your code below this line
            .data(dataset)
            .enter()
            .append("circle")

       // Add your code above this line

  </script>
</body>

```









##Day 18 #Log 18
#Date[21st August 2020]

Today's topic: Data Visualization with D3: Add Attributes to the Circle Elements

Details:
The last challenge created the circle elements for each point in the dataset, and appended them to the SVG canvas. But D3 needs more information about the position and size of each circle to display them correctly.

A circle in SVG has three main attributes. The cx and cy attributes are the coordinates. They tell D3 where to position the center of the shape on the SVG canvas. The radius (r attribute) gives the size of the circle.

Just like the rect y coordinate, the cy attribute for a circle is measured from the top of the SVG canvas, not from the bottom.

All three attributes can use a callback function to set their values dynamically. Remember that all methods chained after data(dataset) run once per item in dataset. The d parameter in the callback function refers to the current item in dataset, which is an array for each point. You use bracket notation, like d[0], to access the values in that array.



The Task:
Add cx, cy, and r attributes to the circle elements. The cx value should be the first number in the array for each item in dataset. The cy value should be based off the second number in the array, but make sure to show the chart right-side-up and not inverted. The r value should be 5 for all circles.

Your code should have 10 circle elements.
Passed
The first circle element should have a cx value of 34, a cy value of 422, and an r value of 5.
Passed
The second circle element should have a cx value of 109, a cy value of 220, and an r value of 5.
Passed
The third circle element should have a cx value of 310, a cy value of 380, and an r value of 5.
Passed
The fourth circle element should have a cx value of 79, a cy value of 89, and an r value of 5.
Passed
The fifth circle element should have a cx value of 420, a cy value of 280, and an r value of 5.
Passed
The sixth circle element should have a cx value of 233, a cy value of 355, and an r value of 5.
Passed
The seventh circle element should have a cx value of 333, a cy value of 404, and an r value of 5.
Passed
The eighth circle element should have a cx value of 222, a cy value of 167, and an r value of 5.
Passed
The ninth circle element should have a cx value of 78, a cy value of 180, and an r value of 5.
Passed
The tenth circle element should have a cx value of 21, a cy value of 377, and an r value of 5.

The Solution:
```
<body>
  <script>
    const dataset = [
                  [ 34,    78 ],
                  [ 109,   280 ],
                  [ 310,   120 ],
                  [ 79,    411 ],
                  [ 420,   220 ],
                  [ 233,   145 ],
                  [ 333,   96 ],
                  [ 222,   333 ],
                  [ 78,    320 ],
                  [ 21,    123 ]
                ];


    const w = 500;
    const h = 500;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("circle")
       .data(dataset)
       .enter()
       .append("circle")
       // Add your code below this line
       .attr("cx", (d) => d[0])
       .attr("cy", (d) => h- d[1])
       .attr("r", 5)




       // Add your code above this line

  </script>
</body>


```










##Day 19 #Log 19
#Date[22nd August 2020]

#Today's topic:Data Visualization with D3: Add Labels to Scatter Plot Circles

Details:
You can add text to create labels for the points in a scatter plot.

The goal is to display the comma-separated values for the first (x) and second (y) fields of each item in dataset.

Task:
The text nodes need x and y attributes to position it on the SVG canvas. In this challenge, the y value (which determines height) can use the same value that the circle uses for its cy attribute. The x value can be slightly larger than the cx value of the circle, so the label is visible. This will push the label to the right of the plotted point.

Label each point on the scatter plot using the text elements. The text of the label should be the two values separated by a comma and a space. For example, the label for the first point is "34, 78". Set the x attribute so it's 5 units more than the value you used for the cx attribute on the circle. Set the y attribute the same way that's used for the cy value on the circle.
Your code should have 10 text elements.
The first label should have text of "34, 78", an x value of 39, and a y value of 422.
The second label should have text of "109, 280", an x value of 114, and a y value of 220.
The third label should have text of "310, 120", an x value of 315, and a y value of 380.
The fourth label should have text of "79, 411", an x value of 84, and a y value of 89.
The fifth label should have text of "420, 220", an x value of 425, and a y value of 280.
The sixth label should have text of "233, 145", an x value of 238, and a y value of 355.
The seventh label should have text of "333, 96", an x value of 338, and a y value of 404.
The eighth label should have text of "222, 333", an x value of 227, and a y value of 167.
The ninth label should have text of "78, 320", an x value of 83, and a y value of 180.
The tenth label should have text of "21, 123", an x value of 26, and a y value of 377.


The solution

```
<body>
  <script>
    const dataset = [
                  [ 34,    78 ],
                  [ 109,   280 ],
                  [ 310,   120 ],
                  [ 79,    411 ],
                  [ 420,   220 ],
                  [ 233,   145 ],
          
                  [ 333,   96 ],
                  [ 222,   333 ],
                  [ 78,    320 ],
                  [ 21,    123 ]
                ];


    const w = 500;
    const h = 500;

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("circle")
       .data(dataset)
       .enter()
       .append("circle")
       .attr("cx", (d, i) => d[0])
       .attr("cy", (d, i) => h - d[1])
       .attr("r", 5);

    svg.selectAll("text")
       .data(dataset)
       .enter()
       .append("text")
       // Add your code below this line

        .text((d) => (d[0] + ", " + d[1]))

        .attr("x", (d,i) => d[0] + 5)
        .attr( "y", (d,i) =>  h - d[1])

       // Add your code above this line
  </script>
</body>
```








##Day 20 #Log 20
#Date[25th August 2020]

Today;s topic:Data Visualization with D3: Create a Linear Scale with D3

Details:
The bar and scatter plot charts both plotted data directly onto the SVG canvas. However, if the height of a bar or one of the data points were larger than the SVG height or width values, it would go outside the SVG area.

In D3, there are scales to help plot data. Scales are functions that tell the program how to map a set of raw data points onto the pixels of the SVG canvas.

For example, say you have a 100x500-sized SVG canvas and you want to plot Gross Domestic Product (GDP) for a number of countries. The set of numbers would be in the billion or trillion-dollar range. You provide D3 a type of scale to tell it how to place the large GDP values into that 100x500-sized area.

It's unlikely you would plot raw data as-is. Before plotting it, you set the scale for your entire data set, so that the x and y values fit your canvas width and height.

D3 has several scale types. For a linear scale (usually used with quantitative data), there is the D3 method scaleLinear():

const scale = d3.scaleLinear()

By default, a scale uses the identity relationship. The value of the input is the same as the value of the output. A separate challenge covers how to change this.


Task:
Change the scale variable to create a linear scale. Then set the output variable to the scale called with an input argument of 50.

Passed
The text in the h2 should be 50.
Passed
Your code should use the scaleLinear() method.
Passed
The output variable should call scale with an argument of 50.



RESULT SOLUTION
```
<body>
  <script>
    // Add your code below this line

    const scale = d3.scaleLinear(); // Create the scale here
    const output = scale(50); // Call the scale with an argument here

    // Add your code above this line

    d3.select("body")
      .append("h2")
      .text(output);

  </script>
</body>

```








##Day 21 #Log 21
#Date[27th August 2020]
Today's topic: Data Visualization with D3: Set a Domain and a Range on a Scale

More details:
By default, scales use the identity relationship - the input value maps to the output value. But scales can be much more flexible and interesting.

Say a data set has values ranging from 50 to 480. This is the input information for a scale, also known as the domain.

You want to map those points along the x axis on the SVG canvas, between 10 units and 500 units. This is the output information, also known as the range.

The domain() and range() methods set these values for the scale. Both methods take an array of at least two elements as an argument. Here's an example:

// Set a domain
// The domain covers the set of input values
scale.domain([50, 480]);
// Set a range
// The range covers the set of output values
scale.range([10, 500]);
scale(50) // Returns 10
scale(480) // Returns 500
scale(325) // Returns 323.37
scale(750) // Returns 807.67
d3.scaleLinear()
Notice that the scale uses the linear relationship between the domain and range values to figure out what the output should be for a given number. The minimum value in the domain (50) maps to the minimum value (10) in the range.


The task:
Create a scale and set its domain to [250, 500] and range to [10, 150].

Note
You can chain the domain() and range() methods onto the scale variable.

Passed
Your code should use the domain() method.
Passed
The domain() of the scale should be set to [250, 500].
Passed
Your code should use the range() method.
Passed
The range() of the scale should be set to [10, 150].
Passed
The text in the h2 should be -102.



THE SOLUTION:

```
<body>
  <script>
    // Add your code below this line
    const scale = d3.scaleLinear();
               scale.domain([250,500]);
               scale.range([10,150]);


    // Add your code above this line
    const output = scale(50);
    d3.select("body")
      .append("h2")
      .text(output);
  </script>
</body>
```







##Day 22 #Log 22
#Date[29th August 2020]
Today's topic: Data Visualization with D3: Use the d3.max and d3.min Functions to Find Minimum and Maximum Values in a Dataset

Details :
The D3 methods domain() and range() set that information for your scale based on the data. There are a couple methods to make that easier.

Often when you set the domain, you'll want to use the minimum and maximum values within the data set. Trying to find these values manually, especially in a large data set, may cause errors.

D3 has two methods - min() and max() to return this information. Here's an example:

const exampleData = [34, 234, 73, 90, 6, 52];
d3.min(exampleData) // Returns 6
d3.max(exampleData) // Returns 234
A dataset may have nested arrays, like the [x, y] coordinate pairs that were in the scatter plot example. In that case, you need to tell D3 how to calculate the maximum and minimum. Fortunately, both the min() and max() methods take a callback function. In this example, the callback function's argument d is for the current inner array. The callback needs to return the element from the inner array (the x or y value) over which you want to compute the maximum or minimum. Here's an example for how to find the min and max values with an array of arrays:

const locationData = [[1, 7],[6, 3],[8, 3]];
// Returns the smallest number out of the first elements
const minX = d3.min(locationData, (d) => d[0]);
// minX compared 1, 6, and 8 and is set to 1

Task:
The positionData array holds sub arrays of x, y, and z coordinates. Use a D3 method to find the maximum value of the z coordinate (the third value) from the arrays and save it in the output variable.

Passed
The text in the h2 should be 8.
Passed
Your code should use the max() method.


Solution:
```
<body>
  <script>
    const positionData = [[1, 7, -4],[6, 3, 8],[2, 9, 3]]
    // Add your code below this line

    const output = d3.max(positionData, (d) => d[2]); // Change this line

    // Add your code above this line

    d3.select("body")
      .append("h2")
      .text(output)
  </script>
</body>
```








##Day 23 #Log 23
#Date[01st September 2020]

Today's topic:
Data Visualization with D3: Use Dynamic Scales

Details of the topic:
The D3 min() and max() methods are useful to help set the scale.

Given a complex data set, one priority is to set the scale so the visualization fits the SVG container's width and height. You want all the data plotted inside the SVG canvas so it's visible on the web page.

The example below sets the x-axis scale for scatter plot data. The domain() method passes information to the scale about the raw data values for the plot. The range() method gives it information about the actual space on the web page for the visualization.

In the example, the domain goes from 0 to the maximum in the set. It uses the max() method with a callback function based on the x values in the arrays. The range uses the SVG canvas' width (w), but it includes some padding, too. This puts space between the scatter plot dots and the edge of the SVG canvas.

const dataset = [
  [ 34,    78 ],
  [ 109,   280 ],
  [ 310,   120 ],
  [ 79,    411 ],
  [ 420,   220 ],
  [ 233,   145 ],
  [ 333,   96 ],
  [ 222,   333 ],
  [ 78,    320 ],
  [ 21,    123 ]
];
const w = 500;
const h = 500;

// Padding between the SVG canvas boundary and the plot
const padding = 30;
const xScale = d3.scaleLinear()
  .domain([0, d3.max(dataset, (d) => d[0])])
  .range([padding, w - padding]);
The padding may be confusing at first. Picture the x-axis as a horizontal line from 0 to 500 (the width value for the SVG canvas). Including the padding in the range() method forces the plot to start at 30 along that line (instead of 0), and end at 470 (instead of 500).

The task:
Use the yScale variable to create a linear y-axis scale. The domain should start at zero and go to the maximum y value in the set. The range should use the SVG height (h) and include padding.

Note
Remember to keep the plot right-side-up. When you set the range for the y coordinates, the higher value (height minus padding) is the first argument, and the lower value is the second argument.

The text in the h2 should be 30.
The domain() of yScale should be equivalent to [0, 411].
The range() of yScale should be equivalent to [470, 30].



SOLUTION:
```

<body>
  <script>
    const dataset = [
                  [ 34,    78 ],
                  [ 109,   280 ],
                  [ 310,   120 ],
                  [ 79,    411 ],
                  [ 420,   220 ],
                  [ 233,   145 ],
                  [ 333,   96 ],
                  [ 222,   333 ],
                  [ 78,    320 ],
                  [ 21,    123 ]
                ];

    const w = 500;
    const h = 500;

    // Padding between the SVG canvas boundary and the plot
    const padding = 30;

    // Create an x and y scale

    const xScale = d3.scaleLinear()
                    .domain([0, d3.max(dataset, (d) => d[0])])
                    .range([padding, w - padding]);

    // Add your code below this line
    
    const yScale = d3.scaleLinear()
                   .domain([0,d3.max(dataset, (d) => d[1])])
                   .range([h - padding, padding]);


    // Add your code above this line

    const output = yScale(411); // Returns 30
    d3.select("body")
      .append("h2")
      .text(output)
  </script>
</body>

```







##Day 24 #Log 24
#Date[02nd September 2020]

Today's topic:Data Visualization with D3: Use a Pre-Defined Scale to Place Elements

Details
With the scales set up, it's time to map the scatter plot again. The scales are like processing functions that turn the x and y raw data into values that fit and render correctly on the SVG canvas. They keep the data within the screen's plotting area.

You set the coordinate attribute values for an SVG shape with the scaling function. This includes x and y attributes for rect or text elements, or cx and cy for circles. Here's an example:

shape
  .attr("x", (d) => xScale(d[0]))
Scales set shape coordinate attributes to place the data points onto the SVG canvas. You don't need to apply scales when you display the actual data value, for example, in the text() method for a tooltip or label.



Task:
Use xScale and yScale to position both the circle and text shapes onto the SVG canvas. For the circles, apply the scales to set the cx and cy attributes. Give them a radius of 5 units, too.

For the text elements, apply the scales to set the x and y attributes. The labels should be offset to the right of the dots. To do this, add 10 units to the x data value before passing it to the xScale.

Passed
Your code should have 10 circle elements.
Passed
The first circle element should have a cx value of approximately 91 and a cy value of approximately 368 after applying the scales. It should also have an r value of 5.
Passed
The second circle element should have a cx value of approximately 159 and a cy value of approximately 181 after applying the scales. It should also have an r value of 5.
Passed
The third circle element should have a cx value of approximately 340 and a cy value of approximately 329 after applying the scales. It should also have an r value of 5.
Passed
The fourth circle element should have a cx value of approximately 131 and a cy value of approximately 60 after applying the scales. It should also have an r value of 5.
Passed
The fifth circle element should have a cx value of approximately 440 and a cy value of approximately 237 after applying the scales. It should also have an r value of 5.
Passed
The sixth circle element should have a cx value of approximately 271 and a cy value of approximately 306 after applying the scales. It should also have an r value of 5.
Passed
The seventh circle element should have a cx value of approximately 361 and a cy value of approximately 351 after applying the scales. It should also have an r value of 5.
Passed
The eighth circle element should have a cx value of approximately 261 and a cy value of approximately 132 after applying the scales. It should also have an r value of 5.
Passed
The ninth circle element should have a cx value of approximately 131 and a cy value of approximately 144 after applying the scales. It should also have an r value of 5.
Passed
The tenth circle element should have a cx value of approximately 79 and a cy value of approximately 326 after applying the scales. It should also have an r value of 5.
Passed
Your code should have 10 text elements.
Passed
The first label should have an x value of approximately 100 and a y value of approximately 368 after applying the scales.
Passed
The second label should have an x value of approximately 168 and a y value of approximately 181 after applying the scales.
Passed
The third label should have an x value of approximately 350 and a y value of approximately 329 after applying the scales.
Passed
The fourth label should have an x value of approximately 141 and a y value of approximately 60 after applying the scales.
Passed
The fifth label should have an x value of approximately 449 and a y value of approximately 237 after applying the scales.
Passed
The sixth label should have an x value of approximately 280 and a y value of approximately 306 after applying the scales.
Passed
The seventh label should have an x value of approximately 370 and a y value of approximately 351 after applying the scales.
Passed
The eighth label should have an x value of approximately 270 and a y value of approximately 132 after applying the scales.
Passed
The ninth label should have an x value of approximately 140 and a y value of approximately 144 after applying the scales.
Passed
The tenth label should have an x value of approximately 88 and a y value of approximately 326 after applying the scales.



SOLUTION
```
<body>
  <script>
    const dataset = [
                  [ 34,     78 ],
                  [ 109,   280 ],
                  [ 310,   120 ],
                  [ 79,   411 ],
                  [ 420,   220 ],
                  [ 233,   145 ],
                  [ 333,   96 ],
                  [ 222,    333 ],
                  [ 78,    320 ],
                  [ 21,   123 ]
                ];

    const w = 500;
    const h = 500;
    const padding = 60;

    const xScale = d3.scaleLinear()
                     .domain([0, d3.max(dataset, (d) => d[0])])
                     .range([padding, w - padding]);

    const yScale = d3.scaleLinear()
                     .domain([0, d3.max(dataset, (d) => d[1])])
                     .range([h - padding, padding]);

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("circle")
       .data(dataset)
       .enter()
       .append("circle")
       // Add your code below this line
          .attr("cx", (d) => xScale(d[0]))
          .attr("cy", (d) => yScale(d[1]))
          .attr("r", 5);


       // Add your code above this line

    svg.selectAll("text")
       .data(dataset)
       .enter()
       .append("text")
       .text((d) =>  (d[0] + ", "
 + d[1]))
       // Add your code below this line

          .attr("x", (d) => xScale(d[0] + 10))
          .attr("y", (d) => yScale(d[1]));

       // Add your code above this line
  </script>
</body>

```







##Day 25 #Log 25
#Date[03rd September 2020]

Today's topic:Add axis to visualization in d3


Details
Another way to improve the scatter plot is to add an x-axis and a y-axis.

D3 has two methods, axisLeft() and axisBottom(), to render the y-axis and x-axis, respectively. Here's an example to create the x-axis based on the xScale in the previous challenges:

const xAxis = d3.axisBottom(xScale);
The next step is to render the axis on the SVG canvas. To do so, you can use a general SVG component, the g element. The g stands for group. Unlike rect, circle, and text, an axis is just a straight line when it's rendered. Because it is a simple shape, using g works. The last step is to apply a transform attribute to position the axis on the SVG canvas in the right place. Otherwise, the line would render along the border of SVG canvas and wouldn't be visible. SVG supports different types of transforms, but positioning an axis needs translate. When it's applied to the g element, it moves the whole group over and down by the given amounts. Here's an example:

const xAxis = d3.axisBottom(xScale);

svg.append("g")
   .attr("transform", "translate(0, " + (h - padding) + ")")
   .call(xAxis);
The above code places the x-axis at the bottom of the SVG canvas. Then it's passed as an argument to the call() method. The y-axis works in the same way, except the translate argument is in the form (x, 0). Because translate is a string in the attr() method above, you can use concatenation to include variable values for its arguments.

Task
The scatter plot now has an x-axis. Create a y-axis in a variable named yAxis using the axisLeft() method. Then render the axis using a g element. Make sure to use a transform attribute to translate the axis by the amount of padding units right, and 0 units down. Remember to call() the axis.

Your code should use the axisLeft() method with yScale passed as the argument.
The y-axis g element should have a transform attribute to translate the axis by (60, 0).
Your code should call the yAxis.



SOLUTION CODE


```

<body>
  <script>
    const dataset = [
                  [ 34,     78 ],
                  [ 109,   280 ],
                  [ 310,   120 ],
                  [ 79,   411 ],
                  [ 420,   220 ],
                  [ 233,   145 ],
                  [ 333,   96 ],
                  [ 222,    333 ],
                  [ 78,    320 ],
                  [ 21,   123 ]
                ];

    const w = 500;
    const h = 500;
    const padding = 60;

    const xScale = d3.scaleLinear()
                     .domain([0, d3.max(dataset, (d) => d[0])])
                     .range([padding, w - padding]);

    const yScale = d3.scaleLinear()
                     .domain([0, d3.max(dataset, (d) => d[1])])
                     .range([h - padding, padding]);

    const svg = d3.select("body")
                  .append("svg")
                  .attr("width", w)
                  .attr("height", h);

    svg.selectAll("circle")
       .data(dataset)
       .enter()
       .append("circle")
       .attr("cx", (d) => xScale(d[0]))
       .attr("cy",(d) => yScale(d[1]))
       .attr("r", (d) => 5);

    svg.selectAll("text")
       .data(dataset)
       .enter()
       .append("text")
       .text((d) =>  (d[0] + "," + d[1]))
       .attr("x", (d) => xScale(d[0] + 10))
       .attr("y", (d) => yScale(d[1]))

    const xAxis = d3.axisBottom(xScale);
    // Add your code below this line
    const yAxis = d3.axisLeft(yScale);
    // Add your code above this line

    svg.append("g")
       .attr("transform", "translate(0," + (h - padding) + ")")
       .call(xAxis);

    // Add your code below this line

     svg.append("g")
       
       .attr("transform", "translate(" + padding + ",0)")
       .call(yAxis);
    

    // Add your code above this line

  </script>
</body>

```






#Day 26
##Today's topic:JSON APIs and Ajax: Handle Click Events with JavaScript using the onclick property

Details:
You want your code to execute only once your page has finished loading. For that purpose, you can attach a JavaScript event to the document called DOMContentLoaded. Here's the code that does this:

document.addEventListener('DOMContentLoaded', function() {

});
You can implement event handlers that go inside of the DOMContentLoaded function. You can implement an onclick event handler which triggers when the user clicks on the element with id getMessage, by adding the following code:

document.getElementById('getMessage').onclick = function(){};


Task:
Add a click event handler inside of the DOMContentLoaded function for the element with id of getMessage.

Passed
Your code should use the document.getElementById method to select the getMessage element.
Passed
Your code should add an onclick event handler.



SOLUTION:


```
<script>
  document.addEventListener('DOMContentLoaded', function(){
    // Add your code below this line

document.getElementById('getMessage').onclick = function(){};
    // Add your code above this line
  });
</script>

<style>
  body {
    text-align: center;
    font-family: "Helvetica", sans-serif;
  }
  h1 {
    font-size: 2em;
    font-weight: bold;
  }
  .box {
    border-radius: 5px;
    background-color: #eee;
    padding: 20px 5px;
  }
  button {
    color: white;
    background-color: #4791d0;
    border-radius: 5px;
    border: 1px solid #4791d0;
    padding: 5px 10px 8px 10px;
  }
  button:hover {
    background-color: #0F5897;
    border: 1px solid #0F5897;
  }
</style>
<h1>Cat Photo Finder</h1>
<p class="message box">
  The message will go here
</p>
<p>
  <button id="getMessage">
    Get Message
  </button>
</p>

```










#Day 27
##Today's topic: JSON APIs and Ajax: Change Text with click Events

Details:
When the click event happens, you can use JavaScript to update an HTML element.

For example, when a user clicks the "Get Message" button, it changes the text of the element with the class message to say "Here is the message".

This works by adding the following code within the click event:

document.getElementsByClassName('message')[0].textContent="Here is the message";

Task:
Add code inside the onclick event handler to change the text inside the message element to say "Here is the message".

Passed
Your code should use the document.getElementsByClassName method to select the element with class message and set its textContent to the given string.



SOLUTION

```
<script>
  document.addEventListener('DOMContentLoaded', function(){
    document.getElementById('getMessage').onclick = function(){
      // Add your code below this line
      document.getElementsByClassName('message')[0].textContent = "Here is the message" ;

      // Add your code above this line
    }
  });
</script>

<style>
  body {
    text-align: center;
    font-family: "Helvetica", sans-serif;
  }
  h1 {
    font-size: 2em;
    font-weight: bold;
  }
  .box {
    border-radius: 5px;
    background-color: #eee;
    padding: 20px 5px;
  }
  button {
    color: white;
    background-color: #4791d0;
    border-radius: 5px;
    border: 1px solid #4791d0;
    padding: 5px 10px 8px 10px;
  }
  button:hover {
    background-color: #0F5897;
    border: 1px solid #0F5897;
  }
</style>

<h1>Cat Photo Finder</h1>
<p class="message box">
  The message will go here
</p>
<p>
  <button id="getMessage">
    Get Message
  </button>
</p>
```







#Day 28
##Today's topic: JSON APIs and Ajax: Get JSON with the JavaScript XMLHttpRequest Method

Details of the topic
You can also request data from an external source. This is where APIs come into play.

Remember that APIs - or Application Programming Interfaces - are tools that computers use to communicate with one another. You'll learn how to update HTML with the data we get from APIs using a technology called AJAX.

Most web APIs transfer data in a format called JSON. JSON stands for JavaScript Object Notation.

JSON syntax looks very similar to JavaScript object literal notation. JSON has object properties and their current values, sandwiched between a { and a }.

These properties and their values are often referred to as "key-value pairs".

However, JSON transmitted by APIs are sent as bytes, and your application receives it as a string. These can be converted into JavaScript objects, but they are not JavaScript objects by default. The JSON.parse method parses the string and constructs the JavaScript object described by it.

You can request the JSON from freeCodeCamp's Cat Photo API. Here's the code you can put in your click event to do this:

const req = new XMLHttpRequest();
req.open("GET",'/json/cats.json',true);
req.send();
req.onload = function(){
  const json = JSON.parse(req.responseText);
  document.getElementsByClassName('message')[0].innerHTML = JSON.stringify(json);
};
Here's a review of what each piece is doing. The JavaScript XMLHttpRequest object has a number of properties and methods that are used to transfer data. First, an instance of the XMLHttpRequest object is created and saved in the req variable. Next, the open method initializes a request - this example is requesting data from an API, therefore is a "GET" request. The second argument for open is the URL of the API you are requesting data from. The third argument is a Boolean value where true makes it an asynchronous request. The send method sends the request. Finally, the onload event handler parses the returned data and applies the JSON.stringify method to convert the JavaScript object into a string. This string is then inserted as the message text.

Task:
Update the code to create and send a "GET" request to the freeCodeCamp Cat Photo API. Then click the "Get Message" button. Your AJAX function will replace the "The message will go here" text with the raw JSON output from the API.

Passed
Your code should create a new XMLHttpRequest.
Passed
Your code should use the open method to initialize a "GET" request to the freeCodeCamp Cat Photo API.
Passed
Your code should use the send method to send the request.
Passed
Your code should have an onload event handler set to a function.
Passed
Your code should use the JSON.parse method to parse the responseText.
Passed
Your code should get the element with class message and change its inner HTML to the string of JSON data.



SOLUTION:


```
<script>
  document.addEventListener('DOMContentLoaded', function(){
    document.getElementById('getMessage').onclick = function(){
      // Add your code below this line
     const req = new XMLHttpRequest();
req.open("GET",'/json/cats.json',true);
req.send();
req.onload = function(){
  const json = JSON.parse(req.responseText);
  document.getElementsByClassName('message')[0].innerHTML = JSON.stringify(json);
};


      // Add your code above this line
    };
  });
</script>

<style>
  body {
    text-align: center;
    font-family: "Helvetica", sans-serif;
  }
  h1 {
    font-size: 2em;
    font-weight: bold;
  }
  .box {
    border-radius: 5px;
    background-color: #eee;
    padding: 20px 5px;
  }
  button {
    color: white;
    background-color: #4791d0;
    border-radius: 5px;
    border: 1px solid #4791d0;
    padding: 5px 10px 8px 10px;
  }
  button:hover {
    background-color: #0F5897;
    border: 1px solid #0F5897;
  }
</style>

<h1>Cat Photo Finder</h1>
<p class="message box">
  The message will go here
</p>
<p>
  <button id="getMessage">
    Get Message
  </button>
</p>

```







#Day 29
##Today's topic:
JSON APIs and Ajax: Get JSON with the JavaScript fetch method

Details
Another way to request external data is to use the JavaScript fetch() method. It is equivalent to XMLHttpRequest, but the syntax is considered easier to understand.

Here is the code for making a GET request to /json/cats.json

fetch('/json/cats.json')
    .then(response => response.json())
    .then(data => {
        document.getElementById('message').innerHTML = JSON.stringify(data);
    })
Take a look at each piece of this code.

The first line is the one that makes the request. So, fetch(URL) makes a GET request to the URL specified. The method returns a Promise.

After a Promise is returned, if the request was successful, the then method is executed, which takes the response and converts it to JSON format.

The then method also returns a Promise, which is handled by the next then method. The argument in the second then is the JSON object you are looking for!

Now, it selects the element that will receive the data by using document.getElementById(). Then it modifies the HTML code of the element by inserting a string created from the JSON object returned from the request.


Task
Update the code to create and send a "GET" request to the freeCodeCamp Cat Photo API. But this time, using the fetch method instead of XMLHttpRequest.

Your code should make a GET request with fetch.
Your code should use then to convert the response to JSON.
Your code should use then to handle the data converted to JSON by the other then.
Your code should get the element with id message and change its inner HTML to the string of JSON data.


SOLUTION

```
<script>
  document.addEventListener('DOMContentLoaded',function(){
    document.getElementById('getMessage').onclick= () => {
      // Add your code below this line
     fetch('/json/cats.json')
     .then(response => response.json())
      .then(data=>{
        document.getElementById('message').innerHTML =JSON.stringify(data);

      } )

      // Add your code above this line
    };
  });
</script>
<style>
  body {
    text-align: center;
    font-family: "Helvetica", sans-serif;
  }
  h1 {
    font-size: 2em;
    font-weight: bold;
  }
  .box {
    border-radius: 5px;
    background-color: #eee;
    padding: 20px 5px;
  }
  button {
    color: white;
    background-color: #4791d0;
    border-radius: 5px;
    border: 1px solid #4791d0;
    padding: 5px 10px 8px 10px;
  }
  button:hover {
    background-color: #0F5897;
    border: 1px solid #0F5897;
  }
</style>
<h1>Cat Photo Finder</h1>
<p id="message" class="box">
  The message will go here
</p>
<p>
  <button id="getMessage">
    Get Message
  </button>
</p>
```







#Day 30
##Today's topic:JSON APIs and Ajax: Access the JSON Data from an API
Details
In the previous challenge, you saw how to get JSON data from the freeCodeCamp Cat Photo API.

Now you'll take a closer look at the returned data to better understand the JSON format. Recall some notation in JavaScript:

[ ] -> Square brackets represent an array
{ } -> Curly brackets represent an object
" " -> Double quotes represent a string. They are also used for key names in JSON
Understanding the structure of the data that an API returns is important because it influences how you retrieve the values you need.

On the right, click the "Get Message" button to load the freeCodeCamp Cat Photo API JSON into the HTML.

The first and last character you see in the JSON data are square brackets [ ]. This means that the returned data is an array. The second character in the JSON data is a curly { bracket, which starts an object. Looking closely, you can see that there are three separate objects. The JSON data is an array of three objects, where each object contains information about a cat photo.

You learned earlier that objects contain "key-value pairs" that are separated by commas. In the Cat Photo example, the first object has "id":0 where "id" is a key and 0 is its corresponding value. Similarly, there are keys for "imageLink", "altText", and "codeNames". Each cat photo object has these same keys, but with different values.

Another interesting "key-value pair" in the first object is "codeNames":["Juggernaut","Mrs. Wallace","ButterCup"]. Here "codeNames" is the key and its value is an array of three strings. It's possible to have arrays of objects as well as a key with an array as a value.

Remember how to access data in arrays and objects. Arrays use bracket notation to access a specific index of an item. Objects use either bracket or dot notation to access the value of a given property. Here's an example that prints the "altText" of the first cat photo - note that the parsed JSON data in the editor is saved in a variable called json:

console.log(json[0].altText);
// Prints "A white cat wearing a green helmet shaped melon on its head."

Task:
For the cat with the "id" of 2, print to the console the second value in the codeNames array. You should use bracket and dot notation on the object (which is saved in the variable json) to access the value.

SOLUTION
```

<script>
  document.addEventListener('DOMContentLoaded', function(){
    document.getElementById('getMessage').onclick = function(){
      const req = new XMLHttpRequest();
      req.open("GET",'/json/cats.json', true);
      req.send();
      req.onload=function(){
        const json = JSON.parse(req.responseText);
        document.getElementsByClassName('message')[0].innerHTML = JSON.stringify(json);
        // Add your code below this line
         console.log(json[2].codeNames[1]);
        // Add your code above this line
      };
    };
  });
</script>

<style>
  body {
    text-align: center;
    font-family: "Helvetica", sans-serif;
  }
  h1 {
    font-size: 2em;
    font-weight: bold;
  }
  .box {
    border-radius: 5px;
    background-color: #eee;
    padding: 20px 5px;
  }
  button {
    color: white;
    background-color: #4791d0;
    border-radius: 5px;
    border: 1px solid #4791d0;
    padding: 5px 10px 8px 10px;
  }
  button:hover {
    background-color: #0F5897;
    border: 1px solid #0F5897;
  }
</style>

<h1>Cat Photo Finder</h1>
<p class="message box">
  The message will go here
</p>
<p>
  <button id="getMessage">
    Get Message
  </button>
</p>

```







#Day 31
##Today's topic: JSON APIs and Ajax: Convert JSON Data to HTML

Details
Now that you're getting data from a JSON API, you can display it in the HTML.

You can use a forEach method to loop through the data since the cat photo objects are held in an array. As you get to each item, you can modify the HTML elements.

First, declare an html variable with let html = "";.

Then, loop through the JSON, adding HTML to the variable that wraps the key names in strong tags, followed by the value. When the loop is finished, you render it.

Here's the code that does this:

let html = "";
json.forEach(function(val) {
  const keys = Object.keys(val);
  html += "<div class = 'cat'>";
  keys.forEach(function(key) {
    html += "<strong>" + key + "</strong>: " + val[key] + "<br>";
  });
  html += "</div><br>";
});
Note: For this challenge, you need to add new HTML elements to the page, so you cannot rely on textContent. Instead, you need to use innerHTML, which can make a site vulnerable to Cross-site scripting attacks.



Task
Add a forEach method to loop over the JSON data and create the HTML elements to display it.

Here is some example JSON

[
  {
    "id":0,
      "imageLink":"https://s3.amazonaws.com/freecodecamp/funny-cat.jpg",
      "altText":"A white cat wearing a green helmet shaped melon on its head. ",
      "codeNames":[ "Juggernaut", "Mrs. Wallace", "Buttercup"
    ]
  }
]
Your code should store the data in the html variable
Your code should use a forEach method to loop over the JSON data from the API.
Your code should wrap the key names in strong tags.


SOLUTION
```
<script>
  document.addEventListener('DOMContentLoaded', function(){
    document.getElementById('getMessage').onclick = function(){
      const req = new XMLHttpRequest();
      req.open("GET",'/json/cats.json',true);
      req.send();
      req.onload = function(){
        const json = JSON.parse(req.responseText);
        let html = "";
        // Add your code below this line
          json.forEach(function(val) {
            const keys = object.keys(val);
            html += "<div class='cat'>";
            keys.forEach(function(key){
              html += "<strong>" + key + "</strong>: " + val[key] + "<br>";
            });
            html += "<div><br>";
          });

        // Add your code above this line
        document.getElementsByClassName('message')[0].innerHTML = html;
      };
    };
  });
</script>

<style>
  body {
    text-align: center;
    font-family: "Helvetica", sans-serif;
  }
  h1 {
    font-size: 2em;
    font-weight: bold;
  }
  .box {
    border-radius: 5px;
    background-color: #eee;
    padding: 20px 5px;
  }
  button {
    color: white;
    background-color: #4791d0;
    border-radius: 5px;
    border: 1px solid #4791d0;
    padding: 5px 10px 8px 10px;
  }
  button:hover {
    background-color: #0F5897;
    border: 1px solid #0F5897;
  }
</style>

<h1>Cat Photo Finder</h1>
<p class="message box">
  The message will go here
</p>
<p>
  <button id="getMessage">
    Get Message
  </button>
</p>


```
